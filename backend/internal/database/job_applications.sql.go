// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: job_applications.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const countJobAppByDate = `-- name: CountJobAppByDate :one
SELECT COUNT(*) 
FROM job_applications
WHERE application_date = $1
`

func (q *Queries) CountJobAppByDate(ctx context.Context, applicationDate time.Time) (int64, error) {
	row := q.db.QueryRowContext(ctx, countJobAppByDate, applicationDate)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countJobAppByMonth = `-- name: CountJobAppByMonth :one
SELECT COUNT(*) 
FROM job_applications
WHERE EXTRACT(YEAR FROM application_date) = $1
AND EXTRACT(MONTH FROM application_date) = $2
`

type CountJobAppByMonthParams struct {
	ApplicationDate   time.Time
	ApplicationDate_2 time.Time
}

func (q *Queries) CountJobAppByMonth(ctx context.Context, arg CountJobAppByMonthParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countJobAppByMonth, arg.ApplicationDate, arg.ApplicationDate_2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countJobAppByUserId = `-- name: CountJobAppByUserId :one
SELECT COUNT(*)
FROM job_applications
WHERE user_id = $1
`

func (q *Queries) CountJobAppByUserId(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countJobAppByUserId, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createJobApp = `-- name: CreateJobApp :one
INSERT INTO job_applications (user_id, company_name, job_title, link)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, company_name, job_title, application_date, link
`

type CreateJobAppParams struct {
	UserID      uuid.UUID
	CompanyName string
	JobTitle    string
	Link        sql.NullString
}

func (q *Queries) CreateJobApp(ctx context.Context, arg CreateJobAppParams) (JobApplication, error) {
	row := q.db.QueryRowContext(ctx, createJobApp,
		arg.UserID,
		arg.CompanyName,
		arg.JobTitle,
		arg.Link,
	)
	var i JobApplication
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompanyName,
		&i.JobTitle,
		&i.ApplicationDate,
		&i.Link,
	)
	return i, err
}

const removeJobAppById = `-- name: RemoveJobAppById :exec
DELETE FROM job_applications
WHERE id = $1
`

func (q *Queries) RemoveJobAppById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeJobAppById, id)
	return err
}

const searchForJobAppByCompanyName = `-- name: SearchForJobAppByCompanyName :many
SELECT id, user_id, company_name, job_title, application_date, link 
FROM job_applications
WHERE company_name ILIKE '%' || $1 || '%'
`

func (q *Queries) SearchForJobAppByCompanyName(ctx context.Context, dollar_1 sql.NullString) ([]JobApplication, error) {
	rows, err := q.db.QueryContext(ctx, searchForJobAppByCompanyName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobApplication
	for rows.Next() {
		var i JobApplication
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CompanyName,
			&i.JobTitle,
			&i.ApplicationDate,
			&i.Link,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
